HISTORY for Inlua, based on Lua 5.1

* Changes from lua 5.1.5
  -------------------------------

  * There are no reserved words. All language syntax is symbolic.
  * All expressions are statements. No exceptions.
  * Logic operators are `&,|,!` for "and, or, not", respectively.
  * Not-equals operator is `!=`.
  * Local variables are declared with prefix `@`: `@a, b = 1, 2`
  * Nil is the `~` character
  * Return is `^^`, and can be followed by a list of expressions.
  * Break is `^^^`, and can be followed by a single expression.
  * Function literals are `[arglist](body)`, and are the only way to define functions.
  * Tables are indexed with `.field` or `.(expression)`. The latter replaces square bracket indexing.
  * While loops are `? condition -> (body)`, and are expressions.
    * While loops evaluate to nil by default.
    * If break is used in the loop, a single value can be placed after the break, and the loop will evaluate to that value: `?1->(^^^7) -- loop evaluates to 7`
  * Blocks are `(code)`, and are expressions.
    * Sub-expressions (`(expression)`) no longer exist, with block expressions as the replacement.
    * The last statement in a block, if not followed by a semicolon, will have its value returned, e.g. `3*(print(); 2+1)` returns 9 while `3*(print(); 2+1;)` does not. This allows blocks to take the place of sub-expressions seamlessly while retaining their ability to execute multiple lines of code.
    * An empty block `()`, or any block which returns no values, evaluates to true. This ensures ternary expressions work as expected with blocks: `condition & (true_code;) | (false_code;)`.
    * Blocks can return multiple values when used as the last argument in a function call or return statement: `io.write(1,2,(3,4))` prints "1234".
    * In a block, if the last returned expression is varargs (`...`) or a function call, that expression will only return one value. The number of return values for a block must be known at compile time.
    * A block in the middle of an expression list will only return one value. At the end of the list, it will return all of its values, or true if no value is returned. This matches the behavior of other multi-return expressions.
  * Repeat-until loops no longer exist. While loops with a block as the condition can serve as a repeat-until loop.
  * For loop syntax changed to use `??` as the prefix, and `[varlist]` as the variable list in generic for loops.
  * Table key assignment with an expression is `{.(expression)=expression}`, instead of `{[expression]=expression}` to distinguish from function definition, and to be consistent with table indexing syntax.
  * Table field assignment is `{.field=value}` to be consistent with the above change, and to further distinguish inlua tables from lua tables.
  * Return and break statements can be used where an expression is expected.
    * This is so ternaries can break or return without needing to enter a block: `@a = v | ^~, "error, missing value"`
  * Lists of expressions on their own, like `f(),g(),h()`, are still expressions. Expression lists are evaluated left-to-right.
  * Functions can only be called with parenthesis, so this syntax is no longer calls the function: `print "arg"` or `print {table}`
    * There are two reasons for this. The first is that all expressions are statements, so there is ambiguity between this as a function call and this as two consecutive statements. The second is that having only one way to call a function increases the consistency and readability of code.

  Per File:
  
  ### Makefiles:
  * Renamed interpreter from `lua` to `inlua`
  * Renamed compiler from `luac` to `inluac`
  * Repeated the above where necessary.
  * Added files for iterator library

  ### llex.h:
  * Removed all token types associated with reserved words.
  * Added TK_ARROW: `->`
  * Set NUM_RESERVED to 0, all reserved words have been removed.

  ### llex.c:
  * `luaX_tokens`
    * Removed all reserved words
    * Changed token for break to `^^`
    * Added arrow token: `->`
  * `read_numeral`
    * Skips over underscores to allow numerical constants to be more readable (e.g. `100_000_000` for one hundred million)
  * `llex`
    * Added logic to parse TK_ARROW `->`
    * Added logic to distinguish not and not equal (`!` vs `!=`)
    * Removed logic to parse nil and not equal, since they are now distinct.
    * Added logic to distinguish carat and break (`^` vs `^^`)

  ### lparser.h:
  * `expkind`
    * Added `VBLOCK` expression to represent blocks which potentially leave multiple values on the stack.

  ### lparser.c:
  * `BlockCnt`: Storing previous freereg, preserving the entire stack state.
  * `searchvar`: Added check to skip over unregistered "active" variables. Unregistered active variables are needed to prevent stack clobbering with block expressions.
  * `adjust_assign`: If final expression in the assignment is a block, treat it the same as a VOID expression to avoid overwriting stack.
  * `enterblock`: Changed to allow for block expressions to function properly with the stack.
    * Inner block's `freereg` is set to current stack `freereg`
    * Sets all active variable slots between current stack `nactvar` and `freereg` to be explicitly unregistered. Works with `searchvar` to avoid badness.
    * Current stack `nactvar` becomes `freereg`, so any local variables in the new block will not overwrite previous temporaries.
  * `leaveblock`: Changed signature to take an `expdesc*` argument. This argument is optional, and used to return a block expression.
    * For regular blocks, "returned" values start at `fs->nactvar`, the current stack's first register for temporaries.
    * For loop blocks, "returned" values start at `bl->freereg`, the previous stack's next free register for temporaries, and only one value can be returned.
    * In many places, `bl->nactvar` was replaced with `bl->freereg`, since `bl->freereg` is the first register for locals within the block.
    * `fs->nactvar` is explicitly set to `bl->nactvar`, since the call to removevars no longer does this implicitly.
    * Added logic for creating the block expression
    * Setting `fs->freereg` to `bl->freereg` instead of `fs->nactvar`, in accordance with previous changes.
  * Added function `eindex`, similar to `yindex`, for indexing with `()`: This is used when handling `table.(key)`
  * `recfield`: changed syntax for expression keys from `[expr]=val` to `.(expr)=val`
  * `lastlistfield`: added logic to handle block expressions 
  * `constructor`: changed case for expression key from `[` to `.`
  * `body`: changed grammar from `(parlist) chunk END` to `[parlist](chunk)`
  * `explist1`: If a block is the last expression, place all block results on stack, adjusting number of expressions accordingly.
  * `funcargs`:
    * Removed ability to call functions without parentheses to increase clarity and consistency of code.
    * Added logic: If a block is the last expression in the arguments list, do not add its results to the stack, since they are already there.
  * `prefixexp`:
    * Sub-expression `( expr )` changed to `( chunk )`. This is where block expressions start.
    * Added while loop expression `? cond -> (chunk)`. This is also a block expression, but it behaves differently (see `leaveblock`).
  * `primaryexp`:
    * Added return `^` and break `^^` as primary expressions.
    * Changed indexing from `table[key]` to `table.(key)`, adding logic to distinguish from field access (e.g. `table.field`)
    * Removed ability to call functions without parentheses to increase clarity and consistency of code.
  * `simpleexp`:
    * Changed nil expression from `TK_NIL` to '~'
    * Removed true and false expressions
    * Changed function expression from `TK_FUNCTION (funcargs) chunk END` to `[funcargs] (chunk)`
  * `getunopr`:
    * Changed not operator from `TK_NOT` to '!'
  * `getbinopr`:
    * Changed and operator from `TK_AND` to `&`
    * Changed or operator from `TK_OR` to `|`
  * `blockfollow`: Changed so a block only ends with `)` or end of stream.
    * Removed cases `TK_ELSE, TK_ELSEIF, TK_END, TK_UNTIL`
    * Added case `)`
  * `block`: Changed signature to take an `expdesc*` argument. This argument is optional, and used to return a block expression.
  * Added function `abort_assignment_aux`, which handles executing expression list statements in the proper order.
  * `assignment`: allows for expression statements without assignment.
    * When aborting the assignment, all LHS expression results are stored in registers, in order of their creation.
  * `breakstat`: Added logic for returning a single expression from a loop.
  * `whilestat`: renamed to whileexpr
  * `whileexpr`:
    * Changed signature to take an `expdesc*` argument. This argument is optional, and used to return a block expression.
    * Changed grammar from `WHILE cond DO block END` to `? cond -> (block)`
    * Added logic to load a single nil value in case the loop ends normally.
    * Swapped order of calls `luaK_patchtohere` and `leaveblock` to allow for loading the default nil value.
  * Removed `repeatstat`
  * Removed `exp1`
  * Removed `forbody`
  * Removed `fornum`
  * Removed `forlist`
  * Removed `forstat`
  * Removed `test_then_block`
  * Removed `ifstat`
  * Removed `localfunc`
  * `localstat`: Added logic to reset `freereg` after registering locals. This ensures proper register usage when locals are in a block expression.
  * Removed `funcname`
  * Removed `funcstat`
  * `exprstat`:
    * Changed call from `primaryexp` to `expr`, allowing for any expression to be in an expression statement.
    * Removed logic for special handling of a function call expression. All expressions are now treated equally.
  * `retstat`:
    * Removed call to `luaX_next` to account for caller skipping RETURN token.
    * Added logic: If a block is the last expression in the return list, do not add its results to the stack, since they are already there.
  * `statement`:
    * Removed if statement
    * Changed while statement to start with `?` instead of `TK_WHILE`
    * Removed block statement. Blocks are now expressions.
    * Removed for loop statement
    * Removed repeat-until statement
    * Removed named (non-anonymous or local) function statement
    * Changed local statement from `TK_LOCAL` to `@`
    * Changed return statement to start with `^` instead of `TK_RETURN`, and skipped return token to match break statement.
  * `chunk`:
    * Added logic: if the last statement does not end with `;`, all temporary values in registers are not free'd. These values are then "stored" in a block expression.

  ### lcode.h:
  * Added function `luaK_blockresults2regs`: places all block expression results onto the stack in free registers.

  ### lcode.c:
  * Implemented `luaK_blockresults2regs`
  * `discharge2reg`: added VBLOCK case which stores a single returned value or true.

  ### liolib.c:
  * Added function `subprocess`, which allows reading and writing from a child process by returning three files: stdout, stdin, and stderr.
    * Implemented on Posix and Windows

  ### lstrlib.c:
  * Renamed `createmetatable` to `registermetatable`, better describing the following changes:
  * A string's metatable is now the string library table itself, not an intermediate table. This makes the __index metamethod faster.
  * Changed `__index` metamethod of string metatable to a function. The function first checks if the key is a number. If so, index into the string, returning a single character. Otherwise, index the string metatable.
  * Added `at(str, index)` function to string library, which indexes a single character from a string, returning nil if out of range. The __index metamethod calls this function if the key is a number.


(end of HISTORY)
